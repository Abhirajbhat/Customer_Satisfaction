# -*- coding: utf-8 -*-
"""Customer_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eW1S2OpLymv-xPxgAqLALf1MsyDD7OKS
"""

#  Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load dataset
customer_data = pd.read_csv("/content/customer_support_tickets.csv")

# Display basic info
print("Shape:", df.shape)
print("\nColumns:", df.columns)
print("\nMissing values:\n", df.isnull().sum())
print("\nData types:\n", df.dtypes)


customer_data=df


# Drop rows with missing values
df = df.dropna()

# Encode categorical variables using LabelEncoder
label_encoders = {}
for col in df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

print("\nData after encoding:\n", df.head())

#  Exploratory Data Analysis (EDA)


# Distribution of target variable
plt.figure(figsize=(6,4))
sns.countplot(x="Customer Satisfaction Rating", data=df, palette="Set2")
plt.title("Customer Satisfaction Distribution")
plt.show()

# Correlation heatmap
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(), annot=False, cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()

#Average satisfaction per product
plt.figure(figsize=(10,5))
sns.barplot(x="Product Purchased", y="Customer Satisfaction Rating", data=df, palette="Blues")
plt.title("Average Satisfaction by Product")
plt.xticks(rotation=45)
plt.show()

#  Satisfaction distribution by Ticket Type
plt.figure(figsize=(8,5))
sns.boxplot(x="Ticket Type", y="Customer Satisfaction Rating", data=df, palette="Set3")
plt.title("Satisfaction by Ticket Type")
plt.xticks(rotation=45)
plt.show()

#Ticket Status vs Satisfaction
plt.figure(figsize=(8,5))
sns.barplot(x="Ticket Status", y="Customer Satisfaction Rating", data=df, palette="coolwarm")
plt.title("Satisfaction by Ticket Status")
plt.show()

#  Gender-wise Satisfaction
plt.figure(figsize=(6,4))
sns.violinplot(x="Customer Gender", y="Customer Satisfaction Rating", data=df, palette="muted")
plt.title("Satisfaction by Gender")
plt.show()

#  Channel used for Support vs Satisfaction
plt.figure(figsize=(8,5))
sns.barplot(x="Ticket Channel", y="Customer Satisfaction Rating", data=df, palette="magma")
plt.title("Satisfaction by Ticket Channel")
plt.xticks(rotation=45)
plt.show()

# Step 3: Feature Engineering


X = df.drop("Customer Satisfaction Rating", axis=1)
y = df["Customer Satisfaction Rating"]
# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Feature Scaling

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

#  Model Building


clf = RandomForestClassifier(n_estimators=200, random_state=42)
clf.fit(X_train, y_train)

# Predictions
y_pred = clf.predict(X_test)

#  Model Evaluation
# -----------------------------------------------------------

# Accuracy
print("Accuracy:", accuracy_score(y_test, y_pred))

# Classification report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Feature Importance
importances = clf.feature_importances_
indices = np.argsort(importances)[::-1]

plt.figure(figsize=(10,6))
sns.barplot(x=importances[indices][:10], y=X.columns[indices][:10], palette="viridis")
plt.title("Top 10 Feature Importances")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.show()

